{"version":3,"sources":["../src/index.js"],"names":["process","env","now","require","config","express","mongoose","bodyParser","helmet","cors","cookieParser","withAuth","userRoutes","postRoutes","authRoutes","channelRoutes","User","model","UserSchema","app","use","credentials","origin","urlencoded","extended","json","get","req","res","send","findOne","_id","userId","populate","user","status","Promise","global","connect","MONGODB_URI","useNewUrlParser","then","console","log","catch","err","listen"],"mappings":";;AACA;;AAaA;;;;AAdA,IAAI,CAACA,QAAQC,GAAR,CAAYC,GAAjB,EAAsBC,QAAQ,QAAR,EAAkBC,MAAlB;;AAEtB,IAAMC,UAAUF,QAAQ,SAAR,CAAhB;AACA,IAAMG,WAAWH,QAAQ,UAAR,CAAjB;AACA,IAAMI,aAAaJ,QAAQ,aAAR,CAAnB;AACA,IAAMK,SAASL,QAAQ,QAAR,CAAf;AACA,IAAMM,OAAON,QAAQ,MAAR,CAAb;AACA,IAAMO,eAAeP,QAAQ,eAAR,CAArB;AACA,IAAMQ,WAAWR,QAAQ,cAAR,CAAjB;;AAEA,IAAMS,aAAaT,QAAQ,qBAAR,CAAnB;AACA,IAAMU,aAAaV,QAAQ,qBAAR,CAAnB;AACA,IAAMW,aAAaX,QAAQ,qBAAR,CAAnB;AACA,IAAMY,gBAAgBZ,QAAQ,wBAAR,CAAtB;;;AAGA,IAAMa,OAAOV,SAASW,KAAT,CAAe,MAAf,EAAuBC,qBAAvB,CAAb;AACA,IAAMC,MAAMd,SAAZ;;AAEAc,IAAIC,GAAJ,CAAQZ,QAAR;AACAW,IAAIC,GAAJ,CAAQX,KAAK,EAAEY,aAAa,IAAf,EAAqBC,QAAQ,uBAA7B,EAAL,CAAR;AACAH,IAAIC,GAAJ,CAAQb,WAAWgB,UAAX,CAAsB,EAAEC,UAAU,IAAZ,EAAtB,CAAR;AACAL,IAAIC,GAAJ,CAAQb,WAAWkB,IAAX,EAAR;AACAN,IAAIC,GAAJ,CAAQV,cAAR;;AAEAS,IAAIO,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AACzBA,MAAIC,IAAJ,CAAS,aAAT;AACD,CAFD;;AAIAV,IAAIO,GAAJ,CAAQ,YAAR,EAAsBf,QAAtB;AAAA,qEAAgC,iBAAOgB,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXZ,KAAKc,OAAL,CAAa,EAAEC,KAAKJ,IAAIK,MAAX,EAAb,EAAkCC,QAAlC,CAA2C,UAA3C,CADW;;AAAA;AACxBC,gBADwB;;AAE9BN,gBAAIO,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,CAAqBS,IAArB;;AAF8B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhC;;AAAA;AAAA;AAAA;AAAA;;AAKA5B,SAAS8B,OAAT,GAAmBC,OAAOD,OAA1B;AACA9B,SACGgC,OADH,CACWtC,QAAQC,GAAR,CAAYsC,WAAZ,IAA2B,2BADtC,EACmE;AAC/DC,mBAAiB;AAD8C,CADnE,EAIGC,IAJH,CAIQ;AAAA,SAAMC,QAAQC,GAAR,CAAY,sBAAZ,CAAN;AAAA,CAJR,EAKGC,KALH,CAKS;AAAA,SAAOF,QAAQC,GAAR,CAAYE,GAAZ,CAAP;AAAA,CALT;;AAOAjC,WAAWO,GAAX;AACAN,WAAWM,GAAX;AACAL,WAAWK,GAAX;AACAJ,cAAcI,GAAd;;AAEAA,IAAI2B,MAAJ,CAAW,MAAX,EAAmBJ,QAAQC,GAAR,CAAY,wBAAZ,CAAnB","file":"index.js","sourcesContent":["if (!process.env.now) require(\"dotenv\").config();\nimport \"babel-polyfill\";\nconst express = require(\"express\");\nconst mongoose = require(\"mongoose\");\nconst bodyParser = require(\"body-parser\");\nconst helmet = require(\"helmet\");\nconst cors = require(\"cors\");\nconst cookieParser = require(\"cookie-parser\");\nconst withAuth = require(\"./middleware\");\n\nconst userRoutes = require(\"./routes/userRoutes\");\nconst postRoutes = require(\"./routes/postRoutes\");\nconst authRoutes = require(\"./routes/authRoutes\");\nconst channelRoutes = require(\"./routes/channelRoutes\");\nimport { UserSchema } from \"./models/userModel\";\n\nconst User = mongoose.model(\"user\", UserSchema);\nconst app = express();\n\napp.use(helmet());\napp.use(cors({ credentials: true, origin: \"http://localhost:3000\" }));\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(bodyParser.json());\napp.use(cookieParser());\n\napp.get(\"/\", (req, res) => {\n  res.send(\"Hello World\");\n});\n\napp.get(\"/checkAuth\", withAuth, async (req, res) => {\n  const user = await User.findOne({ _id: req.userId }).populate(\"channels\");\n  res.status(200).json(user);\n});\n\nmongoose.Promise = global.Promise;\nmongoose\n  .connect(process.env.MONGODB_URI || \"mongodb://localhost/shirk\", {\n    useNewUrlParser: true\n  })\n  .then(() => console.log(\"Connected to mongoDB\"))\n  .catch(err => console.log(err));\n\nuserRoutes(app);\npostRoutes(app);\nauthRoutes(app);\nchannelRoutes(app);\n\napp.listen(\"3333\", console.log(\"Listening on port 3333\"));\n"]}