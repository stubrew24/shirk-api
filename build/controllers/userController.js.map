{"version":3,"sources":["../../src/controllers/userController.js"],"names":["User","mongoose","model","UserSchema","Channel","ChannelSchema","getUsers","req","res","find","err","users","status","json","error","addUser","next","newUser","body","hashPassword","bcrypt","hashSync","password","save","user","username","showUser","findById","_id","params","userId","populate","path","select","exec","undefined"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;AACA;;;;AAEA,IAAMA,OAAOC,mBAASC,KAAT,CAAe,MAAf,EAAuBC,qBAAvB,CAAb;AACA,IAAMC,UAAUH,mBAASC,KAAT,CAAe,SAAf,EAA0BG,2BAA1B,CAAhB;;AAEO,IAAMC,8BAAW,SAAXA,QAAW,CAACC,GAAD,EAAMC,GAAN,EAAc;AACpCR,OAAKS,IAAL,CAAU,EAAV,EAAc,UAACC,GAAD,EAAMC,KAAN,EAAgB;AAC5B,QAAID,GAAJ,EAASF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACTF,QAAIK,IAAJ,CAASF,KAAT;AACD,GAHD;AAID,CALM;;AAOA,IAAMI,4BAAU,SAAVA,OAAU,CAACR,GAAD,EAAMC,GAAN,EAAWQ,IAAX,EAAoB;AACzC,MAAMC,UAAU,IAAIjB,IAAJ,CAASO,IAAIW,IAAb,CAAhB;AACAD,UAAQE,YAAR,GAAuBC,iBAAOC,QAAP,CAAgBd,IAAIW,IAAJ,CAASI,QAAzB,EAAmC,EAAnC,CAAvB;;AAEAL,UAAQM,IAAR,CAAa,UAACb,GAAD,EAAMc,IAAN,EAAe;AAC1B,QAAId,GAAJ,EAASF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACTH,QAAIkB,QAAJ,GAAeD,KAAKC,QAApB;AACAT;AACD,GAJD;AAKD,CATM;;AAWA,IAAMU,8BAAW,SAAXA,QAAW,CAACnB,GAAD,EAAMC,GAAN,EAAc;AACpCR,OAAK2B,QAAL,CAAc,EAAEC,KAAKrB,IAAIsB,MAAJ,CAAWC,MAAlB,EAAd,EACGC,QADH,CACY,EAAEC,MAAM,UAAR,EAAoBC,QAAQ,CAAC,MAAD,EAAS,aAAT,CAA5B,EADZ,EAEGC,IAFH,CAEQ,UAACxB,GAAD,EAAMc,IAAN,EAAe;AACnB,QAAId,GAAJ,EAASF,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,OAAOJ,GAAT,EAArB;AACTc,SAAKL,YAAL,GAAoBgB,SAApB;AACA3B,QAAIK,IAAJ,CAASW,IAAT;AACD,GANH;AAOD,CARM","file":"userController.js","sourcesContent":["import mongoose from \"mongoose\";\nimport bcrypt from \"bcrypt\";\n\nimport { UserSchema } from \"../models/userModel\";\nimport { ChannelSchema } from \"../models/channelModel\";\n\nconst User = mongoose.model(\"user\", UserSchema);\nconst Channel = mongoose.model(\"channel\", ChannelSchema);\n\nexport const getUsers = (req, res) => {\n  User.find({}, (err, users) => {\n    if (err) res.status(400).json({ error: err });\n    res.json(users);\n  });\n};\n\nexport const addUser = (req, res, next) => {\n  const newUser = new User(req.body);\n  newUser.hashPassword = bcrypt.hashSync(req.body.password, 10);\n\n  newUser.save((err, user) => {\n    if (err) res.status(400).json({ error: err });\n    req.username = user.username;\n    next();\n  });\n};\n\nexport const showUser = (req, res) => {\n  User.findById({ _id: req.params.userId })\n    .populate({ path: \"channels\", select: [\"name\", \"description\"] })\n    .exec((err, user) => {\n      if (err) res.status(400).json({ error: err });\n      user.hashPassword = undefined;\n      res.json(user);\n    });\n};\n"]}