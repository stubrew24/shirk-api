{"version":3,"sources":["../../src/controllers/channelController.js"],"names":["User","mongoose","model","UserSchema","Channel","ChannelSchema","joinChannel","req","res","findOne","_id","body","userId","populate","user","channelId","channel","channels","push","save","json","leaveChannel","filter","updatedUser","newChannel","err","status","error","getAllChannels","find","getPublicChannels","visibility","getChannel","findById","params"],"mappings":"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","file":"channelController.js","sourcesContent":["import mongoose from \"mongoose\";\n\nimport { ChannelSchema } from \"../models/channelModel\";\nimport { UserChannelSchema } from \"../models/userChannelModel\";\nimport { UserSchema } from \"../models/userModel\";\n\nconst User = mongoose.model(\"user\", UserSchema);\nconst Channel = mongoose.model(\"channel\", ChannelSchema);\n// const UserChannel = mongoose.model('userChannel', UserChannelSchema);\n\nexport const joinChannel = async (req, res) => {\n  const user = await User.findOne({ _id: req.body.userId }).populate(\n    \"channels\"\n  );\n  const channel = await Channel.findOne({ _id: req.body.channelId });\n\n  user.channels.push(channel);\n  user.save();\n  res.json(user);\n};\n\nexport const leaveChannel = async (req, res) => {\n  const user = await User.findOne({ _id: req.body.userId });\n  user.channels = await user.channels.filter(\n    channel => channel != req.body.channelId\n  );\n  await user.save();\n  const updatedUser = await User.findOne({ _id: req.body.userId }).populate(\n    \"channels\"\n  );\n  res.json(updatedUser);\n};\n\nexport const newChannel = (req, res) => {\n  const newChannel = new Channel(req.body);\n\n  newChannel.save((err, channel) => {\n    if (err) res.status(400).json({ error: err });\n    res.json(channel);\n  });\n};\n\nexport const getAllChannels = (req, res) => {\n  Channel.find({}, (err, channels) => {\n    if (err) res.status(400).json({ error: err });\n    res.json(channels);\n  });\n};\n\nexport const getPublicChannels = (req, res) => {\n  Channel.find({ visibility: \"public\" }, (err, channels) => {\n    if (err) res.status(400).json({ error: err });\n    res.json(channels);\n  });\n};\n\nexport const getChannel = (req, res) => {\n  Channel.findById({ _id: req.params.channelId }, (err, channel) => {\n    if (err) res.status(400).json({ error: err });\n    res.json(channel);\n  });\n};\n"]}