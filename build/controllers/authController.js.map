{"version":3,"sources":["../../src/controllers/authController.js"],"names":["User","mongoose","model","UserSchema","userLogin","req","res","findOne","username","body","err","user","status","json","message","comparePassword","password","hashPassword","payload","id","_id","token","jwt","sign","process","env","SECRET","expiresIn","cookie","httpOnly","logout","clearCookie"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA,IAAMA,OAAOC,mBAASC,KAAT,CAAe,MAAf,EAAuBC,qBAAvB,CAAb;;AAEO,IAAMC,gCAAY,SAAZA,SAAY,CAACC,GAAD,EAAMC,GAAN,EAAc;AACnCN,SAAKO,OAAL,CAAa,EAACC,UAAUH,IAAII,IAAJ,CAASD,QAApB,EAAb,EAA4C,UAACE,GAAD,EAAMC,IAAN,EAAe;AACvD,YAAID,GAAJ,EAAS,MAAMA,GAAN;AACT,YAAI,CAACC,IAAL,EAAW;AACPL,gBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,8DAAV,EAArB;AACH,SAFD,MAEO;AACH,gBAAI,CAACH,KAAKI,eAAL,CAAqBV,IAAII,IAAJ,CAASO,QAA9B,EAAwCL,KAAKM,YAA7C,CAAL,EAAiE;AAC7DX,oBAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,8DAAV,EAArB;AACH,aAFD,MAEO;AACH,oBAAMI,UAAU,EAACC,IAAIR,KAAKS,GAAV,EAAhB;AACA,oBAAMC,QAAQC,uBAAIC,IAAJ,CAASL,OAAT,EAAkBM,QAAQC,GAAR,CAAYC,MAA9B,EAAsC;AAChDC,+BAAW;AADqC,iBAAtC,CAAd;AAGArB,oBAAIsB,MAAJ,CAAW,OAAX,EAAoBP,KAApB,EAA2B,EAAEQ,UAAU,IAAZ,EAA3B,EAA+CjB,MAA/C,CAAsD,GAAtD,EAA2DC,IAA3D,CAAgE,EAACC,SAAS,SAAV,EAAhE;AACH;AACJ;AACJ,KAfD;AAgBH,CAjBM;;AAmBA,IAAMgB,0BAAS,SAATA,MAAS,CAACzB,GAAD,EAAMC,GAAN,EAAc;AAChCA,QAAIyB,WAAJ,CAAgB,OAAhB,EAAyBlB,IAAzB,CAA8B,EAACC,SAAS,SAAV,EAA9B;AACH,CAFM","file":"authController.js","sourcesContent":["import mongoose from 'mongoose';\nimport jwt from 'jsonwebtoken';\n\nimport { UserSchema } from '../models/userModel';\n\nconst User = mongoose.model('user', UserSchema);\n\nexport const userLogin = (req, res) => {\n    User.findOne({username: req.body.username}, (err, user) => {\n        if (err) throw err;\n        if (!user) {\n            res.status(401).json({message: 'Authentication failed. No user found with those credentials.'})\n        } else {\n            if (!user.comparePassword(req.body.password, user.hashPassword)) {\n                res.status(401).json({message: 'Authentication failed. No user found with those credentials.'})\n            } else {\n                const payload = {id: user._id}\n                const token = jwt.sign(payload, process.env.SECRET, {\n                    expiresIn: '30d'\n                });\n                res.cookie('token', token, { httpOnly: true }).status(200).json({message: 'success'})\n            }\n        }\n    })\n};\n\nexport const logout = (req, res) => {\n    res.clearCookie('token').json({message: 'deleted'})\n};"]}